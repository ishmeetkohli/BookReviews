apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "java"

group = 'com.apple.books'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.data:spring-data-rest-hal-explorer'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'com.querydsl:querydsl-apt'
	implementation 'com.querydsl:querydsl-jpa'

	runtimeOnly 'org.springframework.boot:spring-boot-starter-jdbc'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly project(':book-review-frontend')

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jpa'
	annotationProcessor 'org.springframework.boot:spring-boot-starter-data-jpa'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}


def sourceFolder = "$rootDir/book-review-frontend/build"
def targetFolder = "$rootDir/book-review-backend/build/resources/main/static"

task copyWebApp(type: Copy) {
	from "${sourceFolder}"
	into "${targetFolder}"
}

bootJar.dependsOn(copyWebApp)
compileJava.dependsOn ':book-review-frontend:build'

bootJar {
	archiveClassifier.set('boot')
}

jar {
	archiveClassifier.set('')
}

tasks.named('test') {
	useJUnitPlatform()
}